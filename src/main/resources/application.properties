server.port=${PORT:0}
spring.application.name=users-webservice
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.devtools.restart.enabled=true
#eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# H2 Configuration
#spring.h2.console.enabled=true
#spring.h2.console.settings.web-allow-others=true

#datasource.generate-unique-name=false
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


# Mysql Configuration
spring.datasource.username=kanouelm
spring.datasource.password=Azanoune$4
spring.datasource.url=jdbc:mysql://localhost:3306/photo_app?serverTimezone=Europe/Berlin
spring.jpa.hibernate.ddl-auto=update
#tokenSecret=jf9i4jgu83nfl0jfu57ejf7
#server.servlet.context-path=/mostapha-rest

gateway.ip = 192.168.2.81

#10 days
token.expiration_time = 864000000
#random value
token.secret = hfgry463hf746hf573ydh475fhy5739

login.url.path=/users/login

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=kanouelm
spring.rabbitmq.password=Azanoune$4

# Configuration for Eureka display Status-name
eureka.instance.preferIpAddress=true
eureka.instance.instance-id=localhost:${server.port}

# Configuration of actuator
management.endpoints.web.exposure.include=mappings

# albums-ws anbinden
albums.url=http://ALBUMS-WS/users/%s/albums
# Enable HTTP Requests Logging in Feign Client
logging.level.de.kanoune.photoappapiusers.model.feignClient.AlbumsServiceClient=DEBUG

# Hanlde Response Errors with Feign Error Decoder
albums.exceptions.albums-not-found=Users albums not found

# enable hystrix circuilt breaker for our feign client
feign.hystrix.enabled=true

# Use Support of Spring Cloud Sleuth and Zipkin
spring.zipkin.base-url=http://localhost:9411

# How will be this information sent over to Zipkin: there are different ways:
# one way is to send information over http or we could use mqrabbit or kafka
# Here we send information over http:
spring.zipkin.sender.type=web

# The next information is to tell how much of information needs to be sent over to Zipkin Server
# By default none of the information will be sent to Zipkin Server
# If we start the app now the trace id and span id will be visible in log-files but
# not in Zipkin Server because they are not sent over
# 1 is for 100%, 0.1 for 10% and so on....
spring.sleuth.sampler.probability=1       

